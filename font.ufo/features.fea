# # Documentation
#
# This file's syntax and semantics is documented at:
#
# http://adobe-type-tools.github.io/afdko/OpenTypeFeatureFileSpecification.html
#
# The asdfo library then compiles it to an OTF font, the glyph substitution
# part creates GSUB tables in the OTF font. The general documentation how the
# Glyph Substitution table (GSUB) works is described at:
#
# https://docs.microsoft.com/en-us/typography/opentype/spec/gsub
#
# Roughly speaking, the GSUB mechanism is composed of substitution lookups
# (LookupList) tables, each is one of 7 kinds:
# * GSUB LookupType 1: single (a -> x)
# * GSUB LookupType 2: multiple (a -> x y z)
# * GSUB LookupType 3: alternate (a -> x, where x is one of several glyphs)
# * GSUB LookupType 4: ligature (a b c -> x)
# * GSUB LookupType 5: context (a b' d -> x)
# * GSUB LookupType 6: chaining context (chain multiple "context" substitutions)
# * GSUB LookupType 7: extension (use 32-bit offsets instead of 16-bit)
# * GSUB LookupType 8: reverse chaining context (applied from right to left)
#
# The `features.fea` file compiles into these tables, but allows to specify the
# rules in a higher level / simpler language.
#
# # Single
#
# substitute <glyph> by <glyph>;            # format A
# substitute <glyphclass> by <glyph>;       # format B
# substitute <glyphclass> by <glyphclass>;  # format C
#
# E.g.:
#
# substitute a by A.sc;
#
# # Multiple
#
# substitute <glyph> by <glyph sequence>;
#
# E.g.:
#
# substitute f_f_i by f f i;
# sub ka by ka.pas_cakra ka;
#
# # Alternate
#
# substitute <glyph> from <glyphclass>;
#
# E.g.:
#
# substitute ampersand from [ampersand.1 ampersand.2 ampersand.3];
#
# # Ligature
#
# substitute <glyph sequence> by <glyph>;
#
# E.g.:
#
# sub f i by f_i;
# sub f f i by f_f_i;
# sub ka ka.pas_cakra.ns by ka;
#
# The order does not matter, the rendering engine sorts from longest to
# shortest.
#
# # Context
#
# E.g.:
#
# substitute a b c' d' e f by x y
# substitute c' by x y
#
# The rule has three parts: backtrack (a b), input (c' d'),
# and lookahead (e f) glyph sequences. The input is required,
# backtrack/lookahead is optional.
#
# The order matters, the first takes priority.
#
#
# # Chaining Context
#
# E.g.:
#
# sub ka' lookup REMOVE_CAKRA lookup REORDER_CAKRA ka.pas_cakra.ns' ;
# substitute [ a e i o u] f' lookup CNTXT_LIGS i' n' lookup CNTXT_SUB;
#
# The order matters, the first takes priority.
#
# The lookup can only be called for "input" part, and the lookup substitution
# is applied for each position (so CNTXT_LIGS for f' and CNTXT_SUB for n').
#
# Within each lookup, either exactly one rule will apply (and the new sequence
# is passed to the next lookup) or no rule will apply (and the original
# sequence is passed).
#
# The rule is first matched, for example `ka' ka.pas_cakra.ns'` or
# `[ a e i o u] f' i' n'`, and if it matches, then the lookup subsitutions are
# performed in order from left to right at the given position.
#
# Worked out example:
#
# lookup CNTXT_LIGS {
#     substitute f i by f_i;
#     substitute c t by c_t;
# } CNTXT_LIGS;
#
# lookup CNTXT_SUB {
#     substitute n by n.end;
#     substitute s by s.end;
# } CNTXT_SUB;
#
# feature test {
#     substitute [ a e i o u] f' lookup CNTXT_LIGS i' n' lookup CNTXT_SUB;
#     substitute [ a e i o u] c' lookup CNTXT_LIGS t' s' lookup CNTXT_SUB;
# } test;
#
# Here are the steps:
#
# a f i n -> a f_i n -> a f_i n.end
# e c t s -> a c_t s -> a c_t s.end
# e c t n -> e c t n                   # no match
#
#

languagesystem DFLT dflt;
languagesystem latn dflt;

# Basic letters from unicode input (no connections, no begin/end)
@LETTER_LC = [a-z
    aacute adieresis ccaron dcaron eacute ecaron iacute lacute lcaron ncaron
    oacute ocircumflex racute rcaron scaron tcaron uacute uring yacute zcaron];

@LETTER_UC = [A-Z
    Aacute Adieresis Ccaron Dcaron Eacute Ecaron Iacute Lacute Lcaron Ncaron
    Oacute Ocircumflex Racute Rcaron Scaron Tcaron Uacute Uring Yacute Zcaron];

@LETTER0 = [@LETTER_LC @LETTER_UC];

# Our custom versions of letters, cannot be input directly
@LETTER1 = [sleft sdepth scaronleft scarondepth bnarrow onarrow oacutenarrow ocircumflexnarrow vnarrow wnarrow];

# All inner word connections (no begin/end), cannot be input directly
@CONN = [conn_s conn_sv conn_P];

# All letters including connecting paths (conn_s, conn_sv, ...), but no begin
# and end glyphs
@LETTER = [@LETTER0 @LETTER1 @CONN];

@BCONN_LETTERS = [m n ncaron v w y yacute];
@SCONN_LETTERS = [@BCONN_LETTERS t tcaron z zcaron];


lookup LETTER_BEGIN {
# beginning of the word
    ignore substitute @LETTER b';
    substitute b' by begin b;
    ignore substitute @LETTER e';
    substitute e' by begin e;
    ignore substitute @LETTER eacute';
    substitute eacute' by begin eacute;
    ignore substitute @LETTER ecaron';
    substitute ecaron' by begin ecaron;
    ignore substitute @LETTER f';
    substitute f' by begin f;
    ignore substitute @LETTER h';
    substitute h' by begin h;
    ignore substitute @LETTER i';
    substitute i' by begin i;
    ignore substitute @LETTER iacute';
    substitute iacute' by begin iacute;
    ignore substitute @LETTER j';
    substitute j' by begin j;
    ignore substitute @LETTER k';
    substitute k' by begin k;
    ignore substitute @LETTER l';
    substitute l' by begin l;
    ignore substitute @LETTER lacute';
    substitute lacute' by begin lacute;
    ignore substitute @LETTER lcaron';
    substitute lcaron' by begin lcaron;
    ignore substitute @LETTER m';
    substitute m' by begin_straight m;
    ignore substitute @LETTER n';
    substitute n' by begin_straight n;
    ignore substitute @LETTER ncaron';
    substitute ncaron' by begin_straight ncaron;
    ignore substitute @LETTER p';
    substitute p' by begin p;
    ignore substitute @LETTER r';
    substitute r' by begin r;
    ignore substitute @LETTER rcaron';
    substitute rcaron' by begin rcaron;
    ignore substitute @LETTER racute';
    substitute racute' by begin racute;
    ignore substitute @LETTER s';
    substitute s' by begin s;
    ignore substitute @LETTER scaron';
    substitute scaron' by begin scaron;
    ignore substitute @LETTER t';
    substitute t' by begin t;
    ignore substitute @LETTER tcaron';
    substitute tcaron' by begin tcaron;
    ignore substitute @LETTER u';
    substitute u' by begin u;
    ignore substitute @LETTER uacute';
    substitute uacute' by begin uacute;
    ignore substitute @LETTER uring';
    substitute uring' by begin uring;
    ignore substitute @LETTER v';
    substitute v' by begin_straight v;
    ignore substitute @LETTER w';
    substitute w' by begin_straight w;
    ignore substitute @LETTER x';
    substitute x' by begin_x x;
    ignore substitute @LETTER y';
    substitute y' by begin_straight y;
    ignore substitute @LETTER yacute';
    substitute yacute' by begin_straight yacute;
    ignore substitute @LETTER z';
    substitute z' by begin_straight z;
    ignore substitute @LETTER zcaron';
    substitute zcaron' by begin_straight zcaron;
} LETTER_BEGIN;

lookup LETTER_END {
# end of the word
    ignore substitute a' @LETTER;
    substitute a' by a end;
    ignore substitute aacute' @LETTER;
    substitute aacute' by aacute end;
    ignore substitute adieresis' @LETTER;
    substitute adieresis' by adieresis end;
    ignore substitute b' @LETTER;
    substitute b' by b end;
    ignore substitute c' @LETTER;
    substitute c' by c end;
    ignore substitute ccaron' @LETTER;
    substitute ccaron' by ccaron end;
    ignore substitute d' @LETTER;
    substitute d' by d end;
    ignore substitute dcaron' @LETTER;
    substitute dcaron' by dcaron end;
    ignore substitute e' @LETTER;
    substitute e' by e end;
    ignore substitute eacute' @LETTER;
    substitute eacute' by eacute end;
    ignore substitute ecaron' @LETTER;
    substitute ecaron' by ecaron end;
    ignore substitute f' @LETTER;
    substitute f' by f end;
    ignore substitute g' @LETTER;
    substitute g' by g end;
    ignore substitute h' @LETTER;
    substitute h' by h end;
    ignore substitute i' @LETTER;
    substitute i' by i end;
    ignore substitute iacute' @LETTER;
    substitute iacute' by iacute end;
    ignore substitute j' @LETTER;
    substitute j' by j end;
    ignore substitute k' @LETTER;
    substitute k' by k end;
    ignore substitute l' @LETTER;
    substitute l' by l end;
    ignore substitute lacute' @LETTER;
    substitute lacute' by lacute end;
    ignore substitute lcaron' @LETTER;
    substitute lcaron' by lcaron end;
    ignore substitute m' @LETTER;
    substitute m' by m end;
    ignore substitute n' @LETTER;
    substitute n' by n end;
    ignore substitute ncaron' @LETTER;
    substitute ncaron' by ncaron end;
    ignore substitute o' @LETTER;
    substitute o' by o end;
    ignore substitute oacute' @LETTER;
    substitute oacute' by oacute end;
    ignore substitute ocircumflex' @LETTER;
    substitute ocircumflex' by ocircumflex end;
    ignore substitute p' @LETTER;
    substitute p' by p end;
    ignore substitute q' @LETTER;
    substitute q' by q end;
    ignore substitute r' @LETTER;
    substitute r' by r end;
    ignore substitute racute' @LETTER;
    substitute racute' by racute end;
    ignore substitute rcaron' @LETTER;
    substitute rcaron' by rcaron end;
    ignore substitute t' @LETTER;
    substitute t' by t end;
    ignore substitute tcaron' @LETTER;
    substitute tcaron' by tcaron end;
    ignore substitute u' @LETTER;
    substitute u' by u end;
    ignore substitute uacute' @LETTER;
    substitute uacute' by uacute end;
    ignore substitute uring' @LETTER;
    substitute uring' by uring end;
    ignore substitute v' @LETTER;
    substitute v' by v end;
    ignore substitute w' @LETTER;
    substitute w' by w end;
    ignore substitute x' @LETTER;
    substitute x' by x end;
    ignore substitute y' @LETTER;
    substitute y' by y end;
    ignore substitute yacute' @LETTER;
    substitute yacute' by yacute end;
    ignore substitute z' @LETTER;
    substitute z' by z end;
    ignore substitute zcaron' @LETTER;
    substitute zcaron' by zcaron end;

    ignore substitute A' @LETTER;
    substitute A' by A end;
    ignore substitute Aacute' @LETTER;
    substitute Aacute' by Aacute end;
    ignore substitute Adieresis' @LETTER;
    substitute Adieresis' by Adieresis end;
    ignore substitute C' @LETTER;
    substitute C' by C end;
    ignore substitute Ccaron' @LETTER;
    substitute Ccaron' by Ccaron end;
    ignore substitute E' @LETTER;
    substitute E' by E end;
    ignore substitute Eacute' @LETTER;
    substitute Eacute' by Eacute end;
    ignore substitute Ecaron' @LETTER;
    substitute Ecaron' by Ecaron end;
    ignore substitute G' @LETTER;
    substitute G' by G end;
    ignore substitute H' @LETTER;
    substitute H' by H end;
    ignore substitute J' @LETTER;
    substitute J' by J end;
    ignore substitute K' @LETTER;
    substitute K' by K end;
    ignore substitute L' @LETTER;
    substitute L' by L end;
    ignore substitute Lacute' @LETTER;
    substitute Lacute' by Lacute end;
    ignore substitute Lcaron' @LETTER;
    substitute Lcaron' by Lcaron end;
    ignore substitute M' @LETTER;
    substitute M' by M end;
    ignore substitute N' @LETTER;
    substitute N' by N end;
    ignore substitute Q' @LETTER;
    substitute Q' by Q end;
    ignore substitute Ncaron' @LETTER;
    substitute Ncaron' by Ncaron end;
    ignore substitute R' @LETTER;
    substitute R' by R end;
    ignore substitute Racute' @LETTER;
    substitute Racute' by Racute end;
    ignore substitute Rcaron' @LETTER;
    substitute Rcaron' by Rcaron end;
    ignore substitute U' @LETTER;
    substitute U' by U end;
    ignore substitute Uacute' @LETTER;
    substitute Uacute' by Uacute end;
    ignore substitute Uring' @LETTER;
    substitute Uring' by Uring end;
    ignore substitute Y' @LETTER;
    substitute Y' by Y end;
    ignore substitute Yacute' @LETTER;
    substitute Yacute' by Yacute end;
    ignore substitute Z' @LETTER;
    substitute Z' by Z end;
    ignore substitute Zcaron' @LETTER;
    substitute Zcaron' by Zcaron end;
} LETTER_END;

lookup SLEFT {
    ignore substitute @LETTER s';
    substitute s' by sleft;
    ignore substitute @LETTER scaron';
    substitute scaron' by scaronleft;
} SLEFT;

lookup SDEPTH {
    substitute [g j q y yacute Y Yacute] s' by sdepth;
    substitute [g j q y yacute Y Yacute] scaron' by scarondepth;
} SDEPTH;

lookup SCONN {
    substitute s' @SCONN_LETTERS by s conn_sv;
    substitute s' @LETTER by s conn_s;
    substitute scaron' @SCONN_LETTERS by scaron conn_sv;
    substitute scaron' @LETTER by scaron conn_s;
    substitute sleft' @SCONN_LETTERS by sleft conn_sv;
    substitute sleft' @LETTER by sleft conn_s;
    substitute sdepth' @SCONN_LETTERS by sdepth conn_sv;
    substitute sdepth' @LETTER by sdepth conn_s;
    substitute scaronleft' @SCONN_LETTERS by scaronleft conn_sv;
    substitute scaronleft' @LETTER by scaronleft conn_s;
    substitute scarondepth' @SCONN_LETTERS by scarondepth conn_sv;
    substitute scarondepth' @LETTER by scarondepth conn_s;
} SCONN;

lookup BCONN {
    substitute b' @BCONN_LETTERS by bnarrow;
    substitute begin' b' @BCONN_LETTERS by subs_token;
} BCONN;
lookup BCONN2 {
    substitute subs_token by begin bnarrow;
} BCONN2;

lookup OCONN {
    substitute o' @BCONN_LETTERS by onarrow;
    substitute oacute' @BCONN_LETTERS by oacutenarrow;
    substitute ocircumflex' @BCONN_LETTERS by ocircumflexnarrow;
} OCONN;

lookup VCONN {
    substitute v' @BCONN_LETTERS by vnarrow;
    substitute begin_straight' v' @BCONN_LETTERS by subs_token;
} VCONN;
lookup VCONN2 {
    substitute subs_token by begin_straight vnarrow;
} VCONN2;

lookup WCONN {
    substitute w' @BCONN_LETTERS by wnarrow;
    substitute begin_straight' w' @BCONN_LETTERS by subs_token;
} WCONN;
lookup WCONN2 {
    substitute subs_token by begin_straight wnarrow;
} WCONN2;

lookup BUCCONN {
    substitute B' @LETTER_LC by B conn_s;
    substitute D' @LETTER_LC by D conn_s;
    substitute Dcaron' @LETTER_LC by Dcaron conn_s;
    substitute F' @LETTER_LC by F conn_s;
    substitute I' @LETTER_LC by I conn_s;
    substitute Iacute' @LETTER_LC by Iacute conn_s;
    substitute O' @LETTER_LC by O conn_s;
    substitute Oacute' @LETTER_LC by Oacute conn_s;
    substitute Ocircumflex' @LETTER_LC by Ocircumflex conn_s;
    substitute S' @LETTER_LC by S conn_s;
    substitute Scaron' @LETTER_LC by Scaron conn_s;
    substitute T' @LETTER_LC by T conn_s;
    substitute Tcaron' @LETTER_LC by Tcaron conn_s;
    substitute V' @LETTER_LC by V conn_s;
    substitute W' @LETTER_LC by W conn_s;
} BUCCONN;

lookup PCONN {
    substitute P' @LETTER_LC by P conn_P;
} PCONN;

feature liga {
  substitute s' lookup SLEFT lookup SDEPTH lookup SCONN;
  substitute scaron' lookup SLEFT lookup SDEPTH lookup SCONN;
  substitute b' lookup LETTER_END lookup LETTER_BEGIN lookup BCONN lookup BCONN2;
  substitute o' lookup LETTER_END lookup OCONN;
  substitute oacute' lookup LETTER_END lookup OCONN;
  substitute ocircumflex' lookup LETTER_END lookup OCONN;
  substitute v' lookup LETTER_END lookup LETTER_BEGIN lookup VCONN lookup VCONN2;
  substitute w' lookup LETTER_END lookup LETTER_BEGIN lookup WCONN lookup WCONN2;
  substitute [B D Dcaron F I Iacute O Oacute Ocircumflex S Scaron
        T Tcaron V W]' lookup BUCCONN;
  substitute P' lookup PCONN;
  substitute @LETTER0' lookup LETTER_END lookup LETTER_BEGIN;
} liga;
